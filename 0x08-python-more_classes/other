#!/usr/bin/python3
"""Real definition of a rectangle"""


class Rectangle:

    """class attribute"""
    number_of_instances = 0
    print_symbol = '#'
    """Initialization of an instance object"""
    def __init__(self, width=0, height=0):
        self.width = width
        self.height = height
        Rectangle.number_of_instances += 1
    
    """class destructor"""
    def __del__(self):
        print("Bye rectangle...\n")
        Rectangle.number_of_instances -= 1

    @property
    def height(self):
        """Return the size"""
        return self.__height

    @height.setter
    def height(self, value):
        if not isinstance(value, int):
            raise TypeError("height must be an integer")
        if value < 0:
            raise ValueError("height must be >= 0")
        self.__height = value
        

    @property
    def width(self):
        """Return the size"""
        return self.__width

    @width.setter
    def width(self, value):
        if not isinstance(value, int):
            raise TypeError("width must be an integer")
        if value < 0:
            raise ValueError("width must be >= 0")
        self.__width = value

    """finding area and perimeter"""
    def area(self):
        return (self.__height * self.__height)

    def perimeter(self):
        if self.__width == 0 or self.__height == 0:
            return 0
        else:
            return (2 * (self.__height + self.__width))
    
    # def __str__(self):
    #     if self.__width == 0 or self.__height == 0:
    #         return ""
    #     else:

    def __repr__(self):
        return "height" + str(self.__height) + "width" + str(self.__width)
    
    """static method"""
    @staticmethod
    def bigger_or_equal(rect_1, rect_2):
        if not isinstance(rect_1, Rectangle):
            raise TypeError("rect_1 must be an instance of Rectangle")
        if not isinstance(rect_2, Rectangle):
            raise TypeError("rect_1 must be an instance of Rectangle")
        if rect_2.area == rect_1:
            return (rect_1)
        if rect_1.area > rect_2.area:
            return rect_1
        if rect_1.area < rect_2.area:
            return rect_2
        





